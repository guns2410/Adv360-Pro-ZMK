#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        clear_everything: clear_everything {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A) &kp DELETE>;
            label = "CLEAR_EVERYTHING";
        };

        tmux_next_pane: tmux_next {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp N>;
            label = "TMUX_NEXT";
        };

        tmux_prev_pane: tmux_prev {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp P>;
            label = "TMUX_PREV";
        };

        rust_arrow_text: rust_arrow_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT &kp SPACE>;
            label = "RUST_ARROW_TEXT";
        };

        #endif

        hmj: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tdhome: tdhome {
            compatible = "zmk,behavior-tap-dance";
            label = "TDHOME";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp LS(HOME)>;
        };

        tdend: tdend {
            compatible = "zmk,behavior-tap-dance";
            label = "TDEND";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp LS(END)>;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        Bootloader-left {
            bindings = <&bootloader>;
            key-positions = <6 20 34>;
        };

        cmd-space {
            bindings = <&kp LG(SPACE)>;
            key-positions = <65 70>;
        };

        bootloader-right {
            bindings = <&bootloader>;
            key-positions = <7 21 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE             &kp N1       &kp N2           &kp N3             &kp N4        &kp N5  &tog 1                                                                                                 &mo 3              &kp N6  &kp N7        &kp N8              &kp N9       &kp N0               &kp MINUS
&kp TAB               &kp Q        &kp W            &kp E              &kp R         &kp T   &kp COLON                                                                                              &kp DOUBLE_QUOTES  &kp Y   &kp U         &kp I               &kp O        &kp P                &kp BSLH
&lt 1 ESC             &hmj LGUI A  &hmj LEFT_ALT S  &hmj LEFT_SHIFT D  &hmj LCTRL F  &kp G   &kp UNDERSCORE   &kp LS(LC(LEFT_COMMAND))  &kp LALT      &kp LA(LEFT_CONTROL)  &kp RCTRL               &kp SINGLE_QUOTE   &kp H   &hmj RCTRL J  &hmj RIGHT_SHIFT K  &hmj RALT L  &hmj RGUI SEMICOLON  &kp SQT
&hmj LSHFT LC(LA(M))  &kp Z        &kp X            &kp C              &kp V         &kp B                                              &tdhome       &kp PG_UP                                                        &kp N   &kp M         &kp COMMA           &kp DOT      &kp FSLH             &kp RSHFT
&mo 2                 &kp GRAVE    &kp CAPS         &kp PLUS           &kp EQUAL             &lt 2 BACKSPACE  &mt LEFT_SHIFT DELETE     &tdend        &kp PG_DN             &hmj RIGHT_COMMAND RET  &hmj RCTRL SPACE           &kp LC(N)     &kp RC(P)           &kp LBKT     &kp RBKT             &mo 2
            >;
        };

        keypad {
            bindings = <
&kp EQUAL        &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                   &mo 3      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB          &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&hmj ESC ESCAPE  &kp A      &kp S     &kp D     &kp F      &kp G   &none     &kp LCTRL  &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT        &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 2            &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC  &kp DEL    &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2        &kp F3         &kp F4       &kp F5                &kp F6                 &tog 1                                                                  &mo 3          &kp F7          &kp F8            &kp F9             &kp F10          &kp F11    &kp F12
&trans  &kp QUESTION  &kp MINUS      &kp PERCENT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none                                                                   &kp DELETE     &kp LESS_THAN   &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp SQT          &kp LC(P)  &trans
&trans  &kp AT_SIGN   &kp ASTERISK   &kp SLASH    &kp LEFT_BRACE        &kp RIGHT_BRACE        &none      &trans     &trans      &kp LG(BACKSPACE)  &kp LA(BACKSPACE)  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW    &kp UP_ARROW       &kp RIGHT_ARROW  &trans     &trans
&trans  &kp HASH      &kp AMPERSAND  &kp COLON    &kp LEFT_BRACKET      &kp RIGHT_BRACKET                            &trans      &trans                                               &kp PLUS        &kp EQUAL         &trans             &trans           &trans     &trans
&trans  &trans        &trans         &trans       &trans                                       &kp LG(C)  &kp LG(V)  &trans      &trans             &kp LG(ENTER)      &kp LC(SPACE)                  &kp LC(O)         &kp RC(I)          &trans           &trans     &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
